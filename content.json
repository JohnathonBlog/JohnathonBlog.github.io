{"meta":{"title":"孤岛","subtitle":"Le vent se lève, il faut tenter de vivre","description":"我每天都在笑 你猜我过得好不好","author":"Johnathon Dean","url":"https://johnathonblog.github.io","root":"/"},"pages":[{"title":"分类列表","date":"2020-04-30T17:03:08.000Z","updated":"2020-04-30T17:11:01.278Z","comments":true,"path":"categories/index.html","permalink":"https://johnathonblog.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签列表","date":"2020-04-30T17:03:01.000Z","updated":"2020-04-30T17:11:04.206Z","comments":true,"path":"tags/index.html","permalink":"https://johnathonblog.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"OpenCV在Linux中的安装和编程入门","slug":"1401","date":"2020-05-01T09:03:32.000Z","updated":"2020-05-01T10:57:50.846Z","comments":true,"path":"2020/05/01/1401/","link":"","permalink":"https://johnathonblog.github.io/2020/05/01/1401/","excerpt":"","text":"(本文主要参考OpenCV3官方文档)官方文档链接 OpenCV在Linux中的安装依赖项 ** ** - GCC 4.4.x or laterCMake 2.8.7 or higherGitGTK+2.x or higher, including headers (libgtk2.0-dev)pkg-configPython 2.6 or later and Numpy 1.5 or later with developer packages (python-dev, python-numpy)ffmpeg or libav development packages: libavcodec-dev, libavformat-dev, libswscale-dev[optional] libtbb2 libtbb-dev[optional] libdc1394 2.x[optional] libjpeg-dev, libpng-dev, libtiff-dev, libjasper-dev, libdc1394-22-dev[optional] CUDA Toolkit 6.5 or higher 安装依赖项compiler： 1$ sudo apt-get install build-essential required： 1$ sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev optional： 12$ sudo apt-get install python-dev python-numpy \\ libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev 编译安装下载源码： （注意git切换版本）cd ~/git clone https://github.com/opencv/opencv.gitgit clone https://github.com/opencv/opencv_contrib.git 编译安装：cd ~/opencvmkdir buildcd buildcmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..make -j7sudo make install 如果cmake出错可以使用cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local .. 可选择操作：构建文件，进入&lt;cmake_build_dir/doc/&gt;目录cd ~/opencv/build/doc/make -j7 doxygen 下载运行测试程序git clone https://github.com/opencv/opencv_extra.git 程序使用OpenCV的CMakeLists.txt文件样式：cmake_minimum_required(VERSION 2.8)project( DisplayImage )find_package( OpenCV REQUIRED )include_directories( ${OpenCV_INCLUDE_DIRS} )add_executable( DisplayImage DisplayImage.cpp )target_link_libraries( DisplayImage ${OpenCV_LIBS} ) 加载和显示图片：#include &lt;opencv2/core.hpp&gt;#include &lt;opencv2/imgcodecs.hpp&gt;#include &lt;opencv2/highgui.hpp&gt;#include #include using namespace cv;using namespace std;int main( int argc, char** argv ){ String imageName( “../data/HappyFish.jpg” ); // by default if( argc &gt; 1) { imageName = argv[1]; } Mat image; image = imread( imageName, IMREAD_COLOR ); // Read the file if( image.empty() ) // Check for invalid input { cout &lt;&lt; “Could not open or find the image” &lt;&lt; std::endl ; return -1; } namedWindow( “Display window”, WINDOW_AUTOSIZE ); // Create a window for display. imshow( “Display window”, image ); // Show our image inside it. waitKey(0); // Wait for a keystroke in the window return 0;} 加载、修改和保存图像：#include &lt;opencv2/opencv.hpp&gt;using namespace cv;int main( int argc, char* argv ){ char imageName = argv[1]; Mat image; image = imread( imageName, IMREAD_COLOR ); if( argc != 2 || !image.data ) { printf( “ No image data \\n “ ); return -1; } Mat gray_image; cvtColor( image, gray_image, COLOR_BGR2GRAY ); imwrite( “../../images/Gray_Image.jpg”, gray_image ); namedWindow( imageName, WINDOW_AUTOSIZE ); namedWindow( “Gray image”, WINDOW_AUTOSIZE ); imshow( imageName, image ); imshow( “Gray image”, gray_image ); waitKey(0); return 0;}","categories":[{"name":"计算机视觉","slug":"计算机视觉","permalink":"https://johnathonblog.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"}],"tags":[{"name":"Opencv","slug":"Opencv","permalink":"https://johnathonblog.github.io/tags/Opencv/"}]},{"title":"Hexo博客教程","slug":"hello-world","date":"2020-04-22T17:05:27.096Z","updated":"2020-05-01T10:57:40.514Z","comments":true,"path":"2020/04/23/hello-world/","link":"","permalink":"https://johnathonblog.github.io/2020/04/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"https://johnathonblog.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://johnathonblog.github.io/tags/hexo/"},{"name":"博客教程","slug":"博客教程","permalink":"https://johnathonblog.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"}]}],"categories":[{"name":"计算机视觉","slug":"计算机视觉","permalink":"https://johnathonblog.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"},{"name":"hexo","slug":"hexo","permalink":"https://johnathonblog.github.io/categories/hexo/"}],"tags":[{"name":"Opencv","slug":"Opencv","permalink":"https://johnathonblog.github.io/tags/Opencv/"},{"name":"hexo","slug":"hexo","permalink":"https://johnathonblog.github.io/tags/hexo/"},{"name":"博客教程","slug":"博客教程","permalink":"https://johnathonblog.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"}]}